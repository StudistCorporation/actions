name: "コンテナイメージ脆弱性検知"
description: "コンテナイメージのOSやライブラリの脆弱性検知を行う(アプリケーションライブラリは検査対象外)"

inputs:
  github-token:
    description: "Github Token"
    required: true
  image-ref:
    description: "脆弱性検査対象のイメージ"
    required: true
  image-name:
    description: "脆弱性検査対象のイメージを識別するための名前。指定しなければリポジトリ名が使用される"
    required: false
  dockerfile-path:
    description: "脆弱性検査対象のイメージのDockerfile path"
    required: true
  manual-url:
    description: "脆弱性修正手順書のURL"
    required: true
  slack-incoming-webhook-url:
    description: "Slack通知先Incoming Webhook URL"
    required: true
  container-registry-username:
    description: "Docker HubやGitHub Container Registryにあるプライベートイメージを検査する場合のコンテナレジストリのusername"
    required: false
  container-registry-password:
    description: "Docker HubやGitHub Container Registryにあるプライベートイメージを検査する場合のコンテナレジストリのpassword"
    required: false

runs:
  using: "composite"
  steps:
    - name: Run Trivy vulnerability scanner
      id: image-scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ inputs.image-ref }}
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os'
        severity: 'CRITICAL'
        output: 'trivy-results-raw.txt'
      env:
        TRIVY_USERNAME: ${{ inputs.container-registry-username }}
        TRIVY_PASSWORD: ${{ inputs.container-registry-password }}

    - name: Output step summary
      if: failure()
      shell: bash
      run: |
        export BRANCH="${{ github.head_ref || github.ref_name }}"
        export IMAGE="${{ inputs.image-ref }}"
        export TRIVY_RESULTS=`cat trivy-results-raw.txt`
        export MANUAL_URL="${{ inputs.manual-url }}"
        envsubst < ./tmp/actions/.github/actions/image-scan/results.tmpl > trivy-results.txt
        cat trivy-results.txt | tee -a $GITHUB_STEP_SUMMARY

    - name: Set image name
      # if: github.event_name == 'schedule' && failure()
      if: failure()
      shell: bash
      run: |
        if [ -n "${{ inputs.image-name }}" ]; then
          IMAGE_NAME="${{ inputs.image-name }}"
        else
          IMAGE_NAME=`echo ${{ inputs.image-ref }} | sed -r "s/[^/]*\/(.*):.*$/\1/"`
        fi
        echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

    - name: Create issue
      # if: github.event_name == 'schedule' && failure()
      if: failure()
      shell: bash
      run: |
        ISSUE_NUM=`gh issue list --search "${{ env.IMAGE_NAME }} in:title sort:updated-desc" --state open --limit 1 --label image-vulnerability --json number --jq ".[].number"`
        if [ -n "$ISSUE_NUM" ]; then
          ISSUE_URL=`gh issue edit $ISSUE_NUM -F trivy-results.txt`
        else
          ISSUE_URL=`gh issue create -t "コンテナイメージ ${{ env.IMAGE_NAME }} に脆弱性が見つかりました" -F trivy-results.txt -l image-vulnerability`
        fi
        echo "ISSUE_URL=$ISSUE_URL" >> $GITHUB_ENV
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}

    - name: Close issue
      if: github.event_name == 'schedule' && success()
      shell: bash
      run: |
        ISSUE_NUM=`gh issue list --search "${{ env.IMAGE_NAME }} in:title sort:updated-desc" --state open --limit 1 --label image-vulnerability --json number --jq ".[].number"`
        if [ -n "$ISSUE_NUM" ]; then
          gh issue close $ISSUE_NUM -c "脆弱性が解消されました $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
        fi
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}

    - name: Set create pull request flg
      shell: bash
      run: |
        git branch -r | grep develop/fix-image-vulnerability
        if [ $? -ne 0 ]; then
          echo "SHOULD_CREATE_PR=true" >> $GITHUB_ENV 
        fi

    - name: Create Branch
      if: ${{ env.SHOULD_CREATE_PR == 'true' }}
      shell: bash
      run: |
        VERSION=$(cat ${{ inputs.dockerfile-path }} | grep "package-cache-v" | sed -r 's/^.*"package-cache-v(.+)".*$/\1/')
        echo ${VERSION}
        NEXT_VERSION=$(( $VERSION + 1 ))
        echo $NEXT_VERSION
        sed -i "s/package-cache-v${VERSION}/package-cache-v${NEXT_VERSION}/" ${{ inputs.dockerfile-path }}
        
        git checkout -b develop/fix-image-vulnerability
        git add .
        git commit -m "Fix image vulnerability"
        git push --set-upstream origin develop/fix-image-vulnerability
        
        DEFAULT_BRANCH=`git remote show origin | awk '/HEAD/ {print $NF}'`
        echo "DEFAULT_BRANCH=$DEFAULT_BRANCH" >> $GITHUB_ENV 

    - name: Create pull request
      if: ${{ env.SHOULD_CREATE_PR == 'true' }}
      id: create-pr
      uses: repo-sync/pull-request@master
      with:
        destination_branch: ${{ env.DEFAULT_BRANCH }}
        source_branch: "develop/fix-image-vulnerability"
        github_token: ${{ inputs.github-token }}
        pr_title: コンテナイメージの脆弱性修正
        pr_body: |
          ## 概要
          コンテナイメージの脆弱性修正
  
          ## 関連Issue
          Fix ${{ env.ISSUE_URL }} 

    - name: slack test
      shell: bash
      run: |
        echo "コンテナイメージ ${{ env.IMAGE_NAME }} に脆弱性が見つかりました。対応をお願いします\n${{ steps.open-pr.outputs.pr_url }}"
        echo "---------"

#    - name: Send Slack notification
#      if: github.event_name == 'schedule' && failure()
#      id: slack
#      uses: slackapi/slack-github-action@v1.23
#      with:
#        payload: |
#          {
#              "text": ":warning: コンテナイメージ ${{ env.IMAGE_NAME }} に脆弱性が見つかりました。対応をお願いします\n${{ steps.open-pr.outputs.pr_url }}"
#          }
#      env:
#        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
#        SLACK_WEBHOOK_URL: ${{ inputs.slack-incoming-webhook-url }}