name: "コンテナイメージ脆弱性検知"
description: "コンテナイメージのOSやライブラリの脆弱性検知を行う(アプリケーションライブラリは検査対象外)"

inputs:
  github-token:
    description: "Github Token"
    required: true
  image-ref:
    description: "脆弱性検査対象のイメージ"
    required: true
  image-name:
    description: "脆弱性検査対象のイメージを識別するための名前。指定しなければリポジトリ名が使用される"
    required: false
  dockerfile-path:
    description: "脆弱性検査対象のイメージのDockerfile path"
    required: true
  manual-url:
    description: "脆弱性修正手順書のURL"
    required: true
  commit-user-name:
    description: "PRを作成する際のcommit user name"
    required: true
  commit-user-email:
    description: "PRを作成する際のcommit user email"
    required: true
  slack-incoming-webhook-url:
    description: "Slack通知先Incoming Webhook URL"
    required: true
  container-registry-username:
    description: "Docker HubやGitHub Container Registryにあるプライベートイメージを検査する場合のコンテナレジストリのusername"
    required: false
  container-registry-password:
    description: "Docker HubやGitHub Container Registryにあるプライベートイメージを検査する場合のコンテナレジストリのpassword"
    required: false

runs:
  using: "composite"
  steps:
    - name: Run Trivy vulnerability scanner
      id: image-scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ inputs.image-ref }}
        ignore-unfixed: true
        vuln-type: 'os'
        severity: 'CRITICAL'
        output: 'trivy-results-raw.txt'
      env:
        TRIVY_USERNAME: ${{ inputs.container-registry-username }}
        TRIVY_PASSWORD: ${{ inputs.container-registry-password }}

    - name: Set scan result
      shell: bash
      run: |
        if ! grep -q 'Total: 0' trivy-results-raw.txt; then
          echo "FOUND_VULNERABILITY=true" >> $GITHUB_ENV
        fi

    - name: Output step summary
      if: env.FOUND_VULNERABILITY == 'true'
      shell: bash
      run: |
        export BRANCH="${{ github.head_ref || github.ref_name }}"
        export IMAGE="${{ inputs.image-ref }}"
        export TRIVY_RESULTS=`cat trivy-results-raw.txt`
        export MANUAL_URL="${{ inputs.manual-url }}"
        envsubst < ./tmp/actions/.github/actions/image-scan/results.tmpl > trivy-results.txt
        cat trivy-results.txt | tee -a $GITHUB_STEP_SUMMARY

    - name: Set image name
      if: github.event_name == 'schedule' && env.FOUND_VULNERABILITY == 'true'
      shell: bash
      run: |
        if [ -n "${{ inputs.image-name }}" ]; then
          IMAGE_NAME="${{ inputs.image-name }}"
        else
          # リポジトリ名を抽出
          IMAGE_NAME=`echo ${{ inputs.image-ref }} | sed -r "s/[^/]*\/(.*):.*$/\1/"`
        fi
        echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

    - name: Create issue
      if: github.event_name == 'schedule' && env.FOUND_VULNERABILITY == 'true'
      shell: bash
      run: |
        ISSUE_NUM=`gh issue list --search "${{ env.IMAGE_NAME }} in:title sort:updated-desc" --state open --limit 1 --label image-vulnerability --json number --jq ".[].number"`
        if [ -n "$ISSUE_NUM" ]; then
          ISSUE_URL=`gh issue edit $ISSUE_NUM -F trivy-results.txt`
        else
          ISSUE_URL=`gh issue create -t "コンテナイメージ ${{ env.IMAGE_NAME }} に脆弱性が見つかりました" -F trivy-results.txt -l image-vulnerability`
        fi
        echo "ISSUE_URL=$ISSUE_URL" >> $GITHUB_ENV
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}

    - name: Close issue
      if: github.event_name == 'schedule' && env.FOUND_VULNERABILITY != 'true'
      shell: bash
      run: |
        ISSUE_NUM=`gh issue list --search "${{ env.IMAGE_NAME }} in:title sort:updated-desc" --state open --limit 1 --label image-vulnerability --json number --jq ".[].number"`
        if [ -n "$ISSUE_NUM" ]; then
          gh issue close $ISSUE_NUM -c "脆弱性が解消されました $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
        fi
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}

    - name: Set environment variables
      if: github.event_name == 'schedule' && env.FOUND_VULNERABILITY == 'true'
      shell: bash
      run: |
        set +e
        BRANCH_NAME=develop/fix-image-vulnerability-`echo ${{ env.IMAGE_NAME }} | tr '/:' '--'`

        # PR作成ブランチの存在チェック
        git fetch origin $BRANCH_NAME
        if [ $? -ne 0 ]; then
          echo "SHOULD_CREATE_PR=true" >> $GITHUB_ENV
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          # push時のデフォルトブランチ情報を取得しておく
          DEFAULT_BRANCH=`git remote show origin | awk '/HEAD/ {print $NF}'`
          echo "DEFAULT_BRANCH=$DEFAULT_BRANCH" >> $GITHUB_ENV
        fi

    - name: Create Branch
      if: env.SHOULD_CREATE_PR == 'true' && github.event_name == 'schedule' && env.FOUND_VULNERABILITY == 'true'
      shell: bash
      run: |
        VERSION=$(cat ${{ inputs.dockerfile-path }} | grep "package-cache-v" | sed -r 's/^.*"package-cache-v(.+)".*$/\1/')
        NEXT_VERSION=$(( $VERSION + 1 ))
        sed -i "s/package-cache-v${VERSION}/package-cache-v${NEXT_VERSION}/" ${{ inputs.dockerfile-path }}

        git config --global user.name ${{ inputs.commit-user-name }}
        git config --global user.email ${{ inputs.commit-user-email }}
        git checkout -b ${{ env.BRANCH_NAME }}
        git add ${{ inputs.dockerfile-path }}
        git commit -m "Fix image vulnerability"
        git push --set-upstream origin ${{ env.BRANCH_NAME }}

    - name: Create pull request
      if: env.SHOULD_CREATE_PR == 'true' && github.event_name == 'schedule' && env.FOUND_VULNERABILITY == 'true'
      id: create-pr
      uses: repo-sync/pull-request@master
      with:
        destination_branch: ${{ env.DEFAULT_BRANCH }}
        source_branch: ${{ env.BRANCH_NAME }}
        github_token: ${{ inputs.github-token }}
        pr_title: コンテナイメージ ${{ env.IMAGE_NAME }} の脆弱性修正
        pr_label: "image-vulnerability"
        pr_body: |
          ## 概要
          コンテナイメージ ${{ env.IMAGE_NAME }} の脆弱性修正

          ## 関連Issue
          Fix ${{ env.ISSUE_URL }}

    - name: Set PR URL
      shell: bash
      if: github.event_name == 'schedule' && env.FOUND_VULNERABILITY == 'true'
      run: |
        if [ '${{ env.SHOULD_CREATE_PR }}' == 'true' ]; then
          PR_URL=${{ steps.create-pr.outputs.pr_url }}
        else
          PR_URL=`gh pr list --search "${{ env.IMAGE_NAME }} sort:updated-desc" --state open --limit 1 --label image-vulnerability --json url --jq ".[].url"`
        fi
        if [ -z "$PR_URL" ]; then
          # 何かしらの理由でPR URLが取得できない場合はIssue URLを使う
          PR_URL=${{ env.ISSUE_URL }}
        fi
        echo "PR_URL=$PR_URL" >> $GITHUB_ENV
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}

    - name: Send Slack notification
      if: github.event_name == 'schedule' && env.FOUND_VULNERABILITY == 'true'
      uses: slackapi/slack-github-action@v1.23
      with:
        payload: |
          {
              "text": ":warning: コンテナイメージ ${{ env.IMAGE_NAME }} に脆弱性が見つかりました。対応をお願いします！\n${{ env.PR_URL }}"
          }
      env:
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
        SLACK_WEBHOOK_URL: ${{ inputs.slack-incoming-webhook-url }}

    - name: Send Failure notification
      if: github.event_name == 'schedule' && failure()
      uses: slackapi/slack-github-action@v1.23
      with:
        payload: |
          {
              "text": ":warning: コンテナイメージ脆弱性検知workflowがエラーになりました…\n${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }
      env:
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
        SLACK_WEBHOOK_URL: ${{ inputs.slack-incoming-webhook-url }}

    - name: Fail when found vulnerability
      if: env.FOUND_VULNERABILITY == 'true'
      shell: bash
      run: |
        # 脆弱性が見つかった場合はworkflowをfail扱いにする
        exit 1